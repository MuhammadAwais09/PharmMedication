(()=>{"use strict";const e=require("express"),t=require("cors"),r=require("pg"),n=require("dotenv"),{Pool:s}=r;n.config();const i=new s({connectionString:process.env.DATABASE_URL}),a=()=>i;e.Router();const o=require("mongoose"),d=o.Schema({_id:Number,patientID:String,BillingProviderFirstName:String,BillingProviderLastName:String,BillingProviderIdentificationCode:String,BillingProviderAddress:String,BillingProviderCity:String,BillingProviderState:String,BillingProviderZIP:String,SubscriberRelationShip:String,SubscriberName:String,SubscriberFirstName:String,SubscriberLastName:String,SubscriberIdentificationCode:String,SubscriberAddress:String,SubscriberCity:String,SubscriberState:String,SubscriberZIP:String,SubscriberDOB:Date,SubscriberGender:String,PayerName:String,PayerID:String,PayerType:String,BillingProviderSecondaryIdentificationCode:String,RenderingProviderFirstName:String,RenderingProviderLastName:String,RenderingProviderCode:String,RenderingProviderTaxonomy:String,ClaimIndentifier:String,ClaimAmount:String,refferingnpi:String,refferingFirstName:String,refferingLastName:String,authorizationNumber:String,PlaceOfService:String,facilityName:String,facilitynpi:String,facilityAddress1:String,facilityAddress2:String,facilityCity:String,facilityState:String,facilityZip:String,facilityId:String,DateOfService:Date,submitted:{type:Boolean,default:!1},ICDs:[String],CPTs:[{amount:Number,quantity:Number,code:String,placeOfService:String,dateOfServiceFrom:Date,dateOfServiceTo:Date,mod1:String,mod2:String,mod3:String,mod4:String,pointer1:Number,pointer2:Number,pointer3:Number,pointer4:Number}],createdAt:{type:Date,default:new Date}}),c=o.model("claims",d),l=require("jsonwebtoken"),g=o.Schema({GatewayId:String,ReceiverId:String,batchId:String,billingProviderType:String,billingProviderFirstName:String,billingProviderLastName:String,billingProviderTaxonomy:String,InterchangeControlNumber:String,SubmitterName:String,submitterPhone:String,submitterFax:String,ReceiverName:String,TransactionSetControlNumber:String,billingProviderEmail:String,billingProviderFax:String,billingProviderPhone:String,billingProviderNPI:String,BillingProviderAddress:String,BillingProviderAddress2:String,BillingProviderCity:String,BillingProviderState:String,BillingProviderZIP:String,BillingProviderSecondaryIdentificationCode:String,renderringProviderFirstName:String,renderringProviderLastName:String,renderringProviderNPI:String,renderringProviderTaxonomy:String,createdAt:{type:Date,default:new Date},updateAt:{type:Date,default:new Date}});o.model("claimConfig",g);const u=require("module"),m=require("mongodb"),S=require("moment"),p=process.env.secretKey;function y(e){return null!=e&&void 0!==e?e:""}e.Router();const E=o.Schema({_id:Number,payerName:String,payerID:String,payerType:String,address:String,city:String,state:String,zip:Number,phoneNo:Number,fax:String}),N=o.model("insurances",E);e.Router();const f=o.Schema({_id:Number,practiceId:Number,userName:String,emailAddress:String,userType:String,password:String,status:{type:String,default:"Active"},createdAt:{type:Date,default:new Date},updatedAt:{type:Date,default:Date.now}});o.model("users",f);const v=require("bcrypt");e.Router(),n.config();const w=process.env.secretKey,I=o.Schema({_id:Number,name:String,clearingHouseId:String,receiverId:String,interChangeReceiverId:Number,acknowledgementRequested:String,submitterName:String,submitterEmailAddress:String,submitterExchange:String,submittedFax:String,receiverName:String,organizationName:String,organizationPhone:String,billingProviderLastName:String,billingProviderFirstName:String,NPI:Number,address:String,address2:String,city:String,state:String,zipCode:String,identificationCode:Number,renderingProvider:String,lastName:String,firstName:String,providerTaxonomyCode:String,fileCounter:Number,providerG2:String});o.model("practice",I);const h=require("xlsx"),C=require("fs"),b=require("path"),P=(require("url"),process.env.secretKey),$=(e.Router(),require("multer")),A=$.diskStorage({destination:function(e,t,r){r(null,"./uploads/")},filename:function(e,t,r){r(null,t.originalname)}}),R=$({storage:A}),D=e.Router();D.get("/patients",(async(e,t)=>{try{const e=await a().connect(),r="SELECT * FROM patients",n=await e.query(r);e.release(),t.status(200).json(n.rows)}catch(e){console.error("Error getting patients:",e.message),t.status(500).json({message:"Internal Server Error",error:e.message})}})),D.get("/patients/:id",(async(e,t)=>{const{id:r}=e.params;if(isNaN(r))return t.status(400).send("Invalid ID format");try{const e=await a().connect(),n="SELECT * FROM patients WHERE _id = $1",s=[parseInt(r,10)],i=await e.query(n,s);if(e.release(),0===i.rows.length)return t.status(404).send(`Patient with ID: ${r} does not exist`);t.status(200).json(i.rows[0])}catch(e){console.error("Error getting patient by ID:",e.message),t.status(500).json({message:"Internal Server Error",error:e.message})}})),D.post("/patients/",(async(e,t)=>{const{id:r,firstName:n,lastName:s,gender:i,age:o,dob:d,city:c,state:l,zip:g,status:u}=e.body;try{const e=await a().connect();if(r){const a="\n        UPDATE patients SET firstName = $1, lastName = $2, gender = $3, age = $4, dob = $5, city = $6, state = $7, zip = $8, status = $9, updatedAt = $10\n        WHERE _id = $11 RETURNING *",m=[n,s,i,o,d,c,l,g,u,new Date,r],S=await e.query(a,m);e.release(),S.rowCount>0?t.status(200).json(S.rows[0]):t.status(404).json({message:`Patient with ID ${r} not found`})}else{const r=await async function(e){try{const t=await a().connect(),r="\n      UPDATE counter\n      SET seq = seq + 1\n      WHERE _id = $1\n      RETURNING seq",n=[e],s=await t.query(r,n);if(t.release(),s.rowCount>0)return s.rows[0].seq;{const r="\n        INSERT INTO counter (_id, seq)\n        VALUES ($1, 1)\n        RETURNING seq",n=[e];return(await t.query(r,n)).rows[0].seq}}catch(e){throw console.error("Error in getNextSequence:",e),e}}("patients"),m="\n        INSERT INTO patients (_id, firstName, lastName, gender, age, dob, city, state, zip, status, createdAt)\n        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) RETURNING *",S=[r,n,s,i,o,d,c,l,g,u,new Date],p=await e.query(m,S);e.release(),t.status(201).json(p.rows[0])}}catch(e){console.error("Error in addPatient:",e),t.status(500).json({message:"Internal Server Error",error:e.message})}})),D.get("/claims",(async(e,t)=>{const r=["true"===e.query.submitted];try{const e=await a().connect(),n="\n      SELECT * FROM claims\n      WHERE submitted = $1\n      ORDER BY id DESC\n    ",s=await e.query(n,r);e.release();const i=s.rows;t.status(200).json(i)}catch(e){return console.error("Error getting claims:",e.message),t.status(500).json({message:"Internal Server Error",error:e.message})}})),D.post("/claims/addClaim",(async(e,t)=>{const r=a();try{const s=new c(e.body);if(!s._id>0){var n=await async function(e){try{var t=null;a();const r=a().collection("counter");return await r.findOne({_id:e}).then((n=>{t=n;var s={$set:{seq:n.seq+1}};console.log("___________",n),r.updateMany({_id:e},s,(function(e,t){if(e)throw e}))})),t.seq}catch(e){console.log("error: ___________",e)}}("claims");s._id=n,r.collection("claims").insertOne(s,(function(e,t){if(e)throw e;console.log("1 claims document inserted")}))}else r.collection("claims").updateOne({_id:s._id},{$set:s});t.status(201).json(s)}catch(e){t.status(409).json({message:e.message})}})),D.get("/claims/getAllClaimsLogs",(async(e,t)=>{try{const r=e.headers.authorization?.split(" ")[1];if(!r)return t.status(401).json({message:"Access denied. No token provided."});let n;try{n=l.verify(r,p)}catch(e){return t.status(401).json({message:"Invalid token."})}const s=await a().connect(),{practiceId:i}=e.query;let o="SELECT * FROM claimsLogs";const d=[];i&&(o+=' WHERE "practiceId" = $1',d.push(i)),o+=' ORDER BY "id" ASC';const c=await s.query(o,d);s.release();const g=c.rows.map((e=>({...e,uploadTime:S(e.uploadTime).format("MM/DD/YYYY HH:mm")})));t.status(200).json(g)}catch(e){return console.error("Error getting claims:",e.message),t.status(500).json({message:"Internal Server Error",error:e.message})}})),D.post("/claims/generateClaim",(async(e,t)=>{var r=null;console.log("claimConfigCollection"),await async function(){try{const e=a().connect;r=await e.findOne({})}catch(e){return t.status(404).json({message:e.message})}}();var n=null;const s=e.body,i=e.query.medicare;console.log("medicare",i),n=[],await async function(){try{const e=a().connect;n=await e.find({_id:{$in:s}}).toArray()}catch(e){return t.status(404).json({message:e.message})}}();var o=new Date,d=o.toISOString().slice(0,10).replace(/-/g,"").replace(/:/g,""),c=o.toISOString().slice(11,16).replace(/-/g,"").replace(/:/g,""),l=o.toISOString().slice(11,19).replace(/-/g,"").replace(/:/g,""),g=r.GatewayId,S=r.ReceiverId,p=r.InterchangeControlNumber,E=r.batchId,N=r.billingProviderLastName,f=r.SubmitterName,v=r.billingProviderEmail,w=(r.billingProviderPhone,r.billingProviderFax,r.ReceiverName),I=r.ReceiverId,h="",C="";"true"===i&&(w="MASSHEALTH",I="DMA7384",g="110122439C"),h+="ISA*",h+="00*",h+="          *",h+="00*",h+="          *",h+="ZZ*",h+=g.padStart(15)+"*",h+="ZZ*",h+=S.padStart(15)+"*",h+=d+"*",h+=c+"*",h+="^*",h+="00501*",h+=p+"*",h+="1*",h+="P*",h+=">~\n",h+="GS*",h+="HC*",h+=g+"*",h+=S+"*",h+=d+"*",h+=c+"*",h+=E+"*",h+="X*",h+="005010X222A1~\n",h+="ST*",h+="837*",h+=r.TransactionSetControlNumber,h+="*005010X222A1~\n",h+="BHT*",h+="0019*",h+="00*",h+=E+"*",h+=d+"*",h+=c+"*",h+="CH~\n",h+="NM1*",h+="41*",h+="2*",h+=N+"*",h+="*",h+="*",h+="*",h+="*",h+="46*",h+=g+"~\n",h+="PER*",h+="IC*",h+=f+"*",h+="EM*",h+=v+"*",h+="TE*",h+=r.submitterPhone+"*",h+="FX*",h+=r.submitterFax,h+="~\n",h+="NM1*",h+="40*",h+="2*",h+=w+"*",h+="*",h+="*",h+="*",h+="*",h+="46*",h+=I+"~\n";const b=(0,u.createRequire)("file:///D:/office/scBatchBillingAPIs/controllers/claims.js");var P="";let $=1;for(var A=0;A<n.length;A++){var R=n[A];0==A&&(P+="HL*",P+=$+"*",P+="*",P+="20*",P+="1~\n",$+=1,P+="NM1*",P+="85*",P+="2*",P+=y(r.billingProviderLastName)+"*",P+=y(r.billingProviderFirstName)+"*",P+="*",P+="*",P+="*",P+="XX*",P+=r.billingProviderNPI+"~\n",P+="N3*",P+=r.BillingProviderAddress+"*"+y(r.BillingProviderAddress2)+"~\n",P+="N4*",P+=r.BillingProviderCity+"*",P+=r.BillingProviderState+"*",P+=r.BillingProviderZIP+"~\n",P+="REF*",P+="EI*",P+=r.BillingProviderSecondaryIdentificationCode+"~\n"),P+="HL*",P+=`${$}*`,P+="1*",P+="22*",P+="0~\n",$+=1,P+="SBR*",P+="P*";var D=R.SubscriberRelationShip;"self"==D&&(D="18"),P+=D+"*",P+="*",P+="*",P+="*",P+="*",P+="*",P+="*",P+=R.PayerType+"~\n",P+="NM1*",P+="IL*",P+="1*",P+=R.SubscriberLastName+"*",P+=R.SubscriberFirstName+"*",P+="*",P+="*",P+="*",P+="MI*",P+=R.SubscriberIdentificationCode+"~\n",P+="N3*",P+=R.SubscriberAddress+"*",P+="~\n",P+="N4*",P+=R.SubscriberCity+"*",P+=R.SubscriberState+"*",P+=R.SubscriberZIP+"~\n",P+="DMG*",P+="D8*",P+=new Date(R.SubscriberDOB).toISOString().slice(0,10).replace(/-/g,"")+"*";let e=R.SubscriberGender;"male"==e.toLowerCase()?e="M":"female"==e.toLowerCase()&&(e="F"),P+=e+"~",P+="NM1*",P+="PR*",P+="2*",P+=R.PayerName+"*",P+="*",P+="*",P+="*",P+="*",P+="PI*",P+=R.PayerID+"~\n";for(var T=0,L=0,_=0;_<R.CPTs.length;_++)T+=R.CPTs[_].amount,0==_&&(L=R.CPTs[_].placeOfService);if(P+="CLM*",P+=R._id.toString()+"*",P+=parseFloat(T).toString()+"*",P+="*",P+="*",P+=L+">B>1*",P+="Y*",P+="A*",P+="Y*",P+="Y",P+="~",""!=R.authorizationNumber&&(P+="REF*",P+="G1*",P+=R.authorizationNumber+"~"),P+="HI",0==R.ICDs.length)P+="~\n";else{for(var O=0;O<R.ICDs.length;O++)P+="*",P+="ABK>"+R.ICDs[O].replace(".","");P+="~\n"}r.BillingProviderLastName!=r.RenderingProviderFirstName&&(P+="NM1*",P+="82*",P+="1*",P+=R.RenderingProviderFirstName+"*",P+=R.RenderingProviderLastName+"*",P+="***XX*",P+=_2310B_NM106+"~\n",P+="PRV*PE*PXC*",P+=R.RenderingProviderCode+"~\n");for(var F=0;F<R.CPTs.length;F++)null==R.CPTs[F].code||R.CPTs[F].code.length<=0||(P+="LX*",P+=`${(F+1).toString()}~\n`,P+="SV1*",P+="HC>",P+=R.CPTs[F].code,P+="*"+parseFloat(R.CPTs[F].amount),P+="*UN*",P+=parseFloat(R.CPTs[F].quantity)+"*",P+="**1~\n",P+="DTP*",P+="472*",P+="RD8*"+new Date(R.CPTs[F].dateOfServiceFrom).toISOString().slice(0,10).replace(/-/g,"")+"~\n",P+="REF*",P+="6R*",P+=(F+1).toString().padStart(3,"0")+l+"~\n")}C="",C+="SE*",C+=(h+P).split("~\n").length-2+"*",C+=r.TransactionSetControlNumber+"~\n",C+="GE*",C+="1*",C+=r.batchId+"~\n",C+="IEA*",C+="1*";var j=h+P+(C+=p+"~\n"),B=b("fs").createWriteStream("ClaimEdi.txt");B.once("open",(function(e){B.write(j),B.end()}));const q=a();for(var M=0;M<n.length;M++)q.collection("claims").updateOne({_id:n[M]._id},{$set:{submitted:!0}});var H=parseInt(r.batchId)+1;q.collection("claimConfig").updateOne({_id:(0,m.ObjectId)("64410a3c10be6587b398b00b")},{$set:{batchId:H}}),t.status(201).json(j)})),D.post("/claims/getClaimsById",(async(e,t)=>{const r=e.body;try{const e=await a().connect(),n="\n      SELECT * FROM claims\n      WHERE id = ANY($1::int[])\n    ",s=[r],i=await e.query(n,s);e.release();const o=i.rows;t.status(200).json(o)}catch(e){return console.error("Error getting claims by ID:",e.message),t.status(500).json({message:"Internal Server Error",error:e.message})}})),D.post("/claims/addClaimsLogs",(async(e,t)=>{const{uploadedBy:r,filename:n,noOfClaims:s,practiceId:i}=e.body;if(!r||!n)return t.status(400).json({message:"UploadedBy and filename are required"});try{const o=e.headers.authorization?.split(" ")[1];if(!o)return t.status(401).json({message:"Access denied. No token provided."});let d;try{d=l.verify(o,p)}catch(e){return t.status(401).json({message:"Invalid token."})}const c=await a().connect(),g='\n      INSERT INTO claimsLogs ("uploadedBy", "filename", "noOfClaims","practiceId")\n      VALUES ($1, $2, $3,$4)\n      RETURNING "id", "uploadTime";\n    ',u=await c.query(g,[r,n,s,i]);c.release();const{id:m,uploadTime:y}=u.rows[0],E=S(y).format("MM/DD/YYYY HH:mm");return console.log("____formatedDate",E),t.status(201).json({message:"Claim log added successfully",id:m,uploadTime:E})}catch(e){return console.error("Error adding claim log:",e.message),t.status(500).json({message:"Internal Server Error",error:e.message})}})),D.post("/insurances/addInsurance",(async(e,t)=>{const r=a();try{const s=new N(e.body);if(!s._id>0){var n=await async function(e){try{var t=null;a();const r=a().collection("counter");return await r.findOne({_id:e}).then((n=>{t=n;var s={$set:{seq:n.seq+1}};console.log("___________",n),r.updateMany({_id:e},s,(function(e,t){if(e)throw e}))})),t.seq}catch(e){console.log("error: ___________",e)}}("insurances");s._id=n,r.collection("insurances").insertOne(s,(function(e,t){if(e)throw e;console.log("1 insurances document inserted")}))}else r.collection("insurances").updateOne({_id:s._id},{$set:s});t.status(201).json(s)}catch(e){t.status(409).json({message:e.message})}})),D.post("/insurances/getInsurancesById",(async(e,t)=>{var r=e.body,n=null;try{const e=a().collection("insurances");n=await e.find({_id:{$in:r}}).toArray(),t.status(200).json(n)}catch(e){return t.status(404).json({message:e.message})}})),D.get("/insurances",(async(e,t)=>{try{a().collection("insurances").find().sort({_id:"desc"}).toArray().then((e=>{t.status(200).json(e)}))}catch(e){return t.status(404).json({message:e.message})}})),D.post("/insurances/getInsuranceByName",(async(e,t)=>{try{const r=e.body;a().collection("insurances").find({payerName:new RegExp(r,"i")}).toArray().then((e=>{t.status(200).json(e)}))}catch(e){return t.status(404).json({message:e.message})}})),D.post("/users/loginUser",(async(e,t)=>{const{emailAddress:r,password:n}=e.body;try{const e=await a().connect(),s=await e.query('SELECT * FROM users WHERE "emailAddress" = $1',[r]);if(e.release(),0===s.rows.length)return t.status(404).json({message:"User not found"});const i=s.rows[0];if(!await v.compare(n,i.password))return t.status(401).json({message:"Invalid Credentials"});const o=l.sign({id:i.id,userType:i.userType,userName:i.userName,emailAddress:i.emailAddress},w,{expiresIn:"24h"});t.status(200).json({message:"Login successful",userName:i.userName,practiceId:i.practiceId,userType:i.userType,emailAddress:i.emailAddress,token:o})}catch(e){return console.error("Error in loginUser:",e),t.status(500).json({message:"Internal Server Error",error:e.message})}})),D.post("/users/addUsers",(async(e,t)=>{const{id:r,practiceId:n,userName:s,emailAddress:i,userType:o,password:d}=e.body;try{const c=e.headers.authorization?.split(" ")[1];if(!c)return t.status(401).json({message:"Access denied. No token provided."});let g;try{g=l.verify(c,w)}catch(e){return t.status(401).json({message:"Invalid token."})}const u=await a().connect();if(!u)throw new Error("Database connection not established");if(console.log("Database connection established"),r){const e={practiceId:n,userName:s,emailAddress:i,userType:o,updatedAt:new Date};d&&(e.password=await v.hash(d,10));const a=await u.query('UPDATE users SET "practiceId" = COALESCE($1, "practiceId"), "userName" = COALESCE($2, "userName"), "emailAddress" = COALESCE($3, "emailAddress"), "userType" = COALESCE($4, "userType"), "password" = COALESCE($5, "password"), "updatedAt" = $6 WHERE "id" = $7 RETURNING "id"',[e.practiceId,e.userName,e.emailAddress,e.userType,e.password,e.updatedAt,r]);u.release(),a.rowCount>0?t.status(200).json({message:`User with ID ${r} updated successfully`}):t.status(404).json({message:`User with ID ${r} not found`})}else{const e=await v.hash(d,10),r=await u.query('INSERT INTO users ("practiceId", "userName", "emailAddress", "userType", "password", "status", "createdAt", "updatedAt") VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING "id"',[n,s,i,o,e,"Active",new Date,new Date]);console.log("Insert result:",r),u.release(),t.status(201).json({message:"User added successfully",userId:r.rows[0].id})}}catch(e){console.error("Error in addUser:",e),t.status(500).json({message:"Internal Server Error",error:e.message})}})),D.get("/users/getAllUsers",(async(e,t)=>{try{const r=e.headers.authorization?.split(" ")[1];if(!r)return t.status(401).json({message:"Access denied. No token provided."});let n;try{n=l.verify(r,w)}catch(e){return t.status(401).json({message:"Invalid token."})}const s=await a().connect(),i=await s.query('SELECT * FROM users ORDER BY "id" ASC');s.release();const o=i.rows;return o&&0!==o.length?t.status(200).json(o):t.status(404).send("No users found")}catch(e){return console.error("Error getting all users: ",e),t.status(500).json({message:"Internal Server Error"})}})),D.post("/users/userById",(async(e,t)=>{const r=e.body.Id;try{const n=e.headers.authorization?.split(" ")[1];if(!n)return t.status(401).json({message:"Access denied. No token provided."});let s;try{s=l.verify(n,w)}catch(e){return t.status(401).json({message:"Invalid token."})}const i=await a().connect(),o="SELECT * FROM users WHERE id = ANY($1::int[])",d=await i.query(o,[r]);i.release();const c=d.rows;t.status(200).json(c)}catch(e){return console.error("Error getting users by IDs: ",e),t.status(500).json({message:"Internal Server Error",error:e.message})}})),D.delete("/users/deleteUserById/:Id",(async(e,t)=>{const r=e.params.Id;try{const n=e.headers.authorization?.split(" ")[1];if(!n)return t.status(401).json({message:"Access denied. No token provided."});let s;try{s=l.verify(n,w)}catch(e){return t.status(401).json({message:"Invalid token."})}const i=await a().connect(),o=await i.query("DELETE FROM users WHERE id = $1 RETURNING *",[r]);i.release(),1===o.rowCount?t.status(200).json({message:`User with ID ${r} deleted successfully`}):t.status(404).json({message:`User with ID ${r} not found`})}catch(e){return console.error("Error deleting user: ",e),t.status(500).json({message:"Internal Server Error",error:e.message})}})),D.post("/practice/addPractice",(async(e,t)=>{try{let{id:r,name:n,clearingHouseId:s,receiverId:i,interChangeReceiverId:o,acknowledgementRequested:d,submitterName:c,submitterEmailAddress:g,submitterExchange:u,submittedFax:m,receiverName:S,organizationName:p,organizationPhone:y,billingProviderLastName:E,billingProviderFirstName:N,npi:f,address:v,address2:w,city:I,state:h,zipCode:C,identificationCode:b,lastName:$,firstName:A,providerTaxonomyCode:R,fileCounter:D,providerG2:T}=e.body;const L=e.headers.authorization?.split(" ")[1];if(!L)return t.status(401).json({message:"Access denied. No token provided."});try{l.verify(L,P)}catch(e){return t.status(401).json({message:"Invalid token."})}const _=await a().connect();if(!_)throw new Error("Database connection not established");console.log("Database connection established");try{const e=!r;let l,P;if(e&&!D){D=1e8;const e=await(async()=>{const e=await a().connect();try{return(await e.query("SELECT nextval(pg_get_serial_sequence('practices', 'id'))")).rows[0].nextval}finally{e.release()}})();console.log("New practice ID:",e),l='\n          INSERT INTO practices (\n            "id", "name", "clearingHouseId", "receiverId", "interChangeReceiverId", "acknowledgementRequested",\n            "submitterName", "submitterEmailAddress", "submitterExchange", "submittedFax", "receiverName", "organizationName",\n            "organizationPhone", "billingProviderLastName", "billingProviderFirstName", "npi", "address", "address2", "city", "state",\n            "zipCode", "identificationCode", "lastName", "firstName", "providerTaxonomyCode", "fileCounter", "providerG2"\n          ) VALUES (\n            $1, $2, $3 , $4 , $5 , $6 , $7 , $8 , $9 , $10 , $11 , $12 , \n            $13 , $14 , $15 , $16 , $17 , $18 , $19 , $20 , $21 , $22 , \n            $23 , $24 , $25 , $26 , $27 \n          ) RETURNING "id"\n        ',P=[e,n,s,i,o,d,c,g,u,m,S,p,y,E,N,f,v,w,I,h,C,b,$,A,R,D,T]}else l='\n          UPDATE practices SET\n            "name" = COALESCE($2 , "name"), "clearingHouseId" = COALESCE($3 , "clearingHouseId"), "receiverId" = COALESCE($4 , "receiverId"),\n            "interChangeReceiverId" = COALESCE($5 , "interChangeReceiverId"), "acknowledgementRequested" = COALESCE($6 , "acknowledgementRequested"),\n            "submitterName" = COALESCE($7 , "submitterName"), "submitterEmailAddress" = COALESCE($8 , "submitterEmailAddress"),\n            "submitterExchange" = COALESCE($9 , "submitterExchange"), "submittedFax" = COALESCE($10 , "submittedFax"), "receiverName" = COALESCE($11 , "receiverName"),\n            "organizationName" = COALESCE($12 , "organizationName"), "organizationPhone" = COALESCE($13 , "organizationPhone"),\n            "billingProviderLastName" = COALESCE($14 , "billingProviderLastName"), "billingProviderFirstName" = COALESCE($15 , "billingProviderFirstName"),\n            "npi" = COALESCE($16 , "npi"), "address" = COALESCE($17 , "address"), "address2" = COALESCE($18 , "address2"),\n            "city" = COALESCE($19 , "city"), "state" = COALESCE($20 , "state"), "zipCode" = COALESCE($21 , "zipCode"),\n            "identificationCode" = COALESCE($22 , "identificationCode"), "lastName" = COALESCE($23 , "lastName"),\n            "firstName" = COALESCE($24 , "firstName"), "providerTaxonomyCode" = COALESCE($25 , "providerTaxonomyCode"),\n            "fileCounter" = COALESCE($26 , "fileCounter"), "providerG2" = COALESCE($27 , "providerG2")\n          WHERE "id" = $1  RETURNING "id"\n        ',P=[r,n,s,i,o,d,c,g,u,m,S,p,y,E,N,f,v,w,I,h,C,b,$,A,R,D,T];const L=await _.query(l,P),O=L.rows[0]?.id;e?t.status(201).json({message:"Practice added successfully",practiceId:O}):L.rowCount>0?t.status(200).json({message:`Practice with ID ${r} updated successfully`}):t.status(404).json({message:`Practice with ID ${r} not found`})}finally{_.release()}}catch(e){console.error("Error in addPractice:",e),t.status(500).json({message:"Internal Server Error",error:e.message})}})),D.post("/practice/practiceById",(async(e,t)=>{const r=e.body.Id;if(!Array.isArray(r)||!r.length)return t.status(400).json({message:"Invalid input: 'Id' must be a non-empty array"});try{const n=e.headers.authorization?.split(" ")[1];if(!n)return t.status(401).json({message:"Access denied. No token provided."});let s;try{s=l.verify(n,P)}catch(e){return t.status(401).json({message:"Invalid token."})}const i=await a().connect(),o=r.map((e=>Number(e))),d="\n      SELECT * FROM practices\n      WHERE id = ANY($1::int[])\n    ",c=await i.query(d,[o]);i.release();const g=c.rows;t.status(200).json(g)}catch(e){return console.error("Error getting practices by IDs:",e.message),t.status(500).json({message:"Internal Server Error",error:e.message})}})),D.get("/practice/getAllPractice",(async(e,t)=>{try{const r=e.headers.authorization?.split(" ")[1];if(!r)return t.status(401).json({message:"Access denied. No token provided."});let n;try{n=l.verify(r,P)}catch(e){return t.status(401).json({message:"Invalid token."})}const s=await a().connect(),i='SELECT * FROM practices ORDER BY "id" ASC',o=await s.query(i);return s.release(),0===o.rows.length?t.status(404).send("No practices found"):t.status(200).json(o.rows)}catch(e){return console.error("Error getting all practices:",e.message),t.status(500).json({message:"Internal Server Error",error:e.message})}})),D.delete("/practice/deletePracticeById/:Id",(async(e,t)=>{const r=e.params.Id,n=Number(r);if(isNaN(n))return t.status(400).json({message:"Invalid ID format"});try{const s=e.headers.authorization?.split(" ")[1];if(!s)return t.status(401).json({message:"Access denied. No token provided."});let i;try{i=l.verify(s,P)}catch(e){return t.status(401).json({message:"Invalid token."})}const o=await a().connect(),d="\n      DELETE FROM practices\n      WHERE id = $1\n      RETURNING *\n    ",c=await o.query(d,[n]);o.release(),1===c.rowCount?t.status(200).json({message:`Practice with ID ${r} deleted successfully`}):t.status(404).json({message:`Practice with ID ${r} not found`})}catch(e){return console.error("Error deleting practice by ID:",e.message),t.status(500).json({message:"Internal Server Error",error:e.message})}})),D.post("/practice/generatePracticeFile",R.single("file"),(async(e,t)=>{try{const r=e.headers.authorization?.split(" ")[1];if(!r)return t.status(401).json({message:"Access denied. No token provided."});let n;try{n=l.verify(r,P)}catch(M){return t.status(401).json({message:"Invalid token."})}const s=await a().connect(),{practiceId:i}=e.body;console.log("PracticeId",i);const o='SELECT "fileCounter" FROM practices WHERE "id" = $1',d=[i],c=await s.query(o,d);if(c.rows.length>0){let H=c.rows[0].fileCounter;console.log("Filecounter:",H),H++;const x='UPDATE practices SET "fileCounter" = $1 WHERE "id" = $2';let U=[H,i];await s.query(x,U),console.log("Updated Filecounter:",H)}const g='SELECT * FROM practices WHERE "id" = $1',u=await s.query(g,d);s.release();let m="";if(!e.file)return m="No file uploaded",t.status(400).send(m);const S=e.file.originalname,p=b.extname(S).slice(1);console.log("file",S+" type "+p);const y=h.readFile(e.file.path),E=y.SheetNames,N=y.Sheets[E[0]],f=h.utils.sheet_to_json(N),v=f.length-1;console.log("___Rows",v);let w="",I="",$=1,A="",R="",D=0,T=new Date,L=T.getFullYear().toString()+("0"+(T.getMonth()+1)).slice(-2)+("0"+T.getDate()).slice(-2);const _=u.rows.find((e=>e.id===parseInt(i,10)));if(!_)return t.status(404).json({message:"Practice data not found"});m='<style type="text/css">td{text-align: left;padding: 8px;}tr:nth-child(even){background-color: #f2f2f2;}th{background-color: #f2f2f2;font-weight:bold;}</style><div><center><table width="auto" style="border: 2px solid red;"><thead><th align="center">Row No</th><th align="center">Column Name</th><th align="center">Field Name</th><th align="center">Message</th><th align="center">Status</th></thead><tbody>';let O='<style type="text/css">td{text-align: left;padding: 8px;}tr:nth-child(even){background-color: #f2f2f2;}th{background-color: #f2f2f2;font-weight:bold;}</style><div><center><table width="auto" style="border: 2px solid red;"><thead><th align="center">Row No</th><th align="center">Column Name</th><th align="center">Field Name</th><th align="center">Message</th><th align="center">Status</th></thead><tbody>',F=L.slice(2);function j(e){let t=new Date(e);return t.getFullYear().toString()+(t.getMonth()+1).toString().padStart(2,"0")+t.getDate().toString().padStart(2,"0")}function B(e){const t=String(e.getHours()).padStart(2,"0"),r=String(e.getMinutes()).padStart(2,"0");return String(e.getSeconds()).padStart(2,"0"),`${t}${r}`}function q(e,t="N"){return null==e||"-"===e||"#NAME?"===e?"":"Y"===t?parseFloat(e).toFixed(2).toString():"String"===t?String(e):String(e).trim()}f.forEach(((t,r)=>{if(D++,!q(_.clearingHouseId))return;if(q(N["A"+(D+1)]?.w).length<=0)return;q(t["AA"+(D+1)]?.w),q(t["AB"+(D+1)]?.w);let n=q(_.organizationName);if(n){if(D>0){I+="HL*",I+=$+"*",I+="*",I+="20*",I+="1~\n",$+=1,I+="PRV*BI*PXC*",I+=q(_.providerTaxonomyCode)+"~\n",I+="NM1*",I+="85*",I+="2*",I+=q(_.billingProviderLastName)+"~\n",I+="N3*";let s=q(_.address),i=q(_.address2),a=s+"*"+i;""===s&&""===i?(m+=`<tr><td>${r}</td><td>O&P</td><td>Billing Provider Street Address</td><td>Not Provided</td><td>Warning</td></tr>`,I+="~\n"):I+=a+"~\n",I+="N4*";let o=q(_.city);o?I+=o+"*":(m+=`<tr><td>${r}</td><td>Q</td><td>Billing Provider City</td><td>Not Provided</td><td>Warning</td></tr>`,I+="*");let d=q(_.state);d?I+=d+"*":(m+=`<tr><td>${r}</td><td>R</td><td>Billing Provider State</td><td>Not Provided</td><td>Warning</td></tr>`,I+="*");let c=q(_.zipCode).replace("-","");c?(c=c.length>6?c.padStart(9,"0"):c.padStart(5,"0"),I+=c+"~\n"):(m+=`<tr><td>${r}</td><td>S</td><td>Billing Provider ZIP</td><td>Not Provided</td><td>Warning</td></tr>`,I+="~\n"),I+="REF*",I+="EI*";let l=q(_.identificationCode);l?I+=l+"~\n":(m+=`<tr><td>${r}</td><td>T</td><td>Billing Provider Identification Code</td><td>Not Provided</td><td>Warning</td></tr>`,I+="~\n"),I+="HL*",I+=$+"*",I+=$-1+"*",I+="22*",I+="0~\n",$+=1,I+="SBR*";let g=q(N["DI"+(D+1)]?.w);g?I+=g+"P*":(m+=`<tr><td>${t}</td><td>AJ</td><td>Payer Responsibility</td><td>Not Provided</td><td>Warning</td></tr>`,I+="P*");let u=q(N["M"+(D+1)]?.w);u?I+=q(u):(m+=`<tr><td>${t}</td><td>M</td><td>Client Relationship to Insured</td><td>Not Provided</td><td>Warning</td></tr>`,I+="*"),I+="*",I+="*",I+="*",I+="*",I+="*",I+="*",I+="*";let S=q(N["N"+(D+1)]?.w)+"~\n";I+=S,I+="NM1*",I+="IL*",I+="1*";let p=q(N["D"+(D+1)]?.w);p||(m+=`<tr><td>${t}</td><td>C</td><td>Last Name</td><td>Not Provided</td><td>Warning</td></tr>`),I+=p+"*";let E=q(N["E"+(D+1)]?.w);E||(m+=`<tr><td>${t}</td><td>D</td><td>First Name</td><td>Not Provided</td><td>Warning</td></tr>`),I+=E+"*",I+="*",I+="*",I+="*",I+="MI*";let f=q(N["K"+(D+1)]?.w);f||(m+=`<tr><td>${t}</td><td>K</td><td>Identification Code</td><td>Not Provided</td><td>Warning</td></tr>`,I+=q(N["K"+(D+1)]?.w)+"~\n"),I+=f+"~\n",I+="N3*",I+=q(N["H"+(D+1)]?.w).replace("\n"," ")+"*",I+="~\n",I+="N4*",o=q(N["I"+(D+1)]?.w),I+=o+"*",d=q(N["J"+(D+1)]?.w),I+=d+"*",c=q(N["L"+(D+1)]?.w).padStart(5,"0").replace("-",""),c?I+=c+"~\n":(m+=`<tr><td>${t}</td><td>L</td><td>ZIP Code</td><td>Not Provided</td><td>Warning</td></tr>`,I+="~\n"),I+="DMG*",I+="D8*";let v=q(N["F"+(D+1)]?.w);if(v){const e=v.split("/");if(3===e.length){const t=e[0].padStart(2,"0"),r=e[1].padStart(2,"0");v=`${2===e[2].length?"19"+e[2]:e[2]}${t}${r}`}else m+=`<tr><td>${t}</td><td>E</td><td>Date of Birth</td><td>Unexpected format</td><td>Error</td></tr>`,I+="*";console.log(v),I+=v+"*"}else m+=`<tr><td>${t}</td><td>E</td><td>Date of Birth</td><td>Not Provided</td><td>Warning</td></tr>`,I+="*";let P=q(N["G"+(D+1)]?.w);if(P?"M"===P.toUpperCase()||"O"===P.toUpperCase()?I+="M~\n":"F"===P.toUpperCase()?I+="F~\n":I+=q(P)+"~\n":(m+=`<tr><td>${t}</td><td>F</td><td>Gender</td><td>Not Provided</td><td>Warning</td></tr>`,I+="~\n"),I+="NM1*",I+="PR*",I+="2*",S=q(N["O"+(D+1)]?.w),S||(m+=`<tr><td>${t}</td><td>O</td><td>Payer Name</td><td>Not Provided</td><td>Warning</td></tr>`),I+=S+"*",I+="*",I+="*",I+="*",I+="*",I+="PI*",a=q(N["P"+(D+1)]?.w),a)try{a.length>=5?I+=a+"~\n":I+=a.padStart(5,"0")+"~\n"}catch(e){I+=q(a)+"~\n",m+=`<tr><td>${t}</td><td>P</td><td>Payer ID</td><td>Non-Integer</td><td>Warning</td></tr>`}else m+=`<tr><td>${t}</td><td>P</td><td>Payer ID</td><td>Not Provided</td><td>Warning</td></tr>`,I+="~\n";let T=q(_.providerG2);T&&(I+="REF*",I+="G2*",I+=T+"~\n");let M=q(N["C"+(D+1)]?.w);M?I+=`CLM*${M}*`:(m+=`<tr><td>${t}</td><td>K</td><td>Claim Identifier</td><td>Not Provided</td><td>Warning</td></tr>`,I+="*");let H=q(N["AA"+(D+1)]?.w,"Y"),x=q(N["AH"+(D+1)]?.w,"Y"),U=0,Y=0,W=0;if("Y"!==H){const e="AB"+(D+1),t="AA"+(D+1);if(Y=(parseFloat(q(N[e]?.w,"Y"))||1)*(parseFloat(q(N[t]?.w,"Y"))||0),"Y"!==x){const e="AI"+(D+1),t="AH"+(D+1);W=(parseFloat(q(N[e]?.w,"Y"))||1)*(parseFloat(q(N[t]?.w,"Y"))||0),U=Y+W}else U=Y;I+=U+"*"}else m+=`<tr><td>${t}</td><td>V</td><td>Claim Amount</td><td>Not Provided</td><td>Warning</td></tr>`,I+="*";I+="*",I+="*";let z=q(N["X"+(D+1)]?.w);if(z)try{z.length>1?I+=`${z}:A:`:I+=`0${z}:A:`}catch(e){m+=`<tr><td>${t}</td><td>BY</td><td>Place of Service</td><td>Non-Integer</td><td>Warning</td></tr>`,I+=":A*"}else m+=`<tr><td>${t}</td><td>P</td><td>Place of Service</td><td>Not Provided</td><td>Warning</td></tr>`,I+=":A*";I+="1",I+="**A*",I+="Y*",I+="Y",I+="~\n";let k=q(N["A"+(D+1)]?.w).replace(/-/g,"").trim(),G="",Z=q(N["B"+(D+1)]?.w).replace(/-/g,"").trim(),X="";I+="DTP*",I+="434*",I+="RD8*",G=j(k),Z=Z?j(Z):G,X=`${G}-${Z}`,I+=X+"~\n";let V=q(N["Q"+(D+1)]?.w).replace(/-/g,""),K=q(N["R"+(D+1)]?.w).replace(/-|:/g,"").trim(),[Q,J,ee]=V.split("/"),te=parseInt(K.substr(0,2),10),re=parseInt(K.substr(2,2),10),ne=new Date(ee,Q-1,J,te,re);G=j(V);let se=`${("0"+ne.getHours()).slice(-2)}${("0"+ne.getMinutes()).slice(-2)}`;I+="DTP*",I+="435*",I+="DT*",X=G+se,I+=X+"~\n",I+="CL1*",I+=q(parseInt(N["S"+(D+1)]?.w))+"*",I+=q(parseInt(N["T"+(D+1)]?.w))+"*",I+=q(parseInt(N["U"+(D+1)]?.w)).padStart(2,"0")+"*",I+="~\n",q(N["AN"+(D+1)]?.w)&&(I+="REF*",I+="G1*",I+="~\n"),I+="HI";let ie=q(N["Y"+(D+1)]?.w);if(ie){let e=ie.split(",");for(let t=0;t<e.length;t++)I+="*",I+=0===t?"ABK:"+q(e[t].trim()).replace(/\./g,""):"ABF:"+q(e[t].trim()).replace(/\./g,"");I+="~\n"}else I+="~\n";I+="HI*",I+="BE:",I+=q(N["V"+(D+1)]?.w)+":::"+q(N["W"+(D+1)]?.w),I+="*~\n";let ae="";if(ae&&(I+="SBR*",I+="*",I+="18*",I+="*",I+="*",I+="*",I+="*",I+="*",I+="*",I+="ZZ~\n",I+="OI***Y***Y~\n",I+="NM1*",I+="IL*",I+="1*",a=q(N["DS"+(D+1)]?.w),a||(m+="<tr><td></td><td>DS</td><td>Subscriber Last Name</td><td>Not Provided</td><td>Warning</td></tr>"),I+=q(N["DS"+(D+1)]?.w)+"*",a=q(N["DT"+(D+1)]?.w),a||(m+="<tr><td></td><td>DT</td><td>Subscriber First Name</td><td>Not Provided</td><td>Warning</td></tr>"),I+=q(N["DT"+(D+1)]?.w)+"*",I+=q(N["DU"+(D+1)]?.w)+"*",I+=q(N["DV"+(D+1)]?.w)+"*",I+=q(N["DW"+(D+1)]?.w)+"*",I+=q(N["DX"+(D+1)]?.w)+"MI2222*",I+=q(N["DY"+(D+1)]?.w)+"~\n",I+="NM1*",I+="PR*",I+="2*",I+=ae.padStart(5,"0")+"*",I+="*",I+="*",I+="*",I+="*",I+="PI*",I+=ae.padStart(5,"0")+"~\n"),T=q(_.providerG2),T||(I+="REF*",I+="G2*",I+="~\n"),I+="LX*1~\n",I+="SV2*",I+=q(N["Z"+(D+1)]?.w).padStart(4,"0"),I+="**",q(N["AB"+(D+1)]?.w)){let e=parseFloat(q(N["AB"+(D+1)]?.w,"Y"))||0,t=parseFloat(q(N["AA"+(D+1)]?.w,"Y"))||0;I+=e*t+"*"}I+="UN*";let oe=q(N["AB"+(D+1)]?.w);if(oe&&(oe=parseInt(oe)),I+=oe+"~\n",k=q(N["AF"+(D+1)]?.w).replace(/-/g,""),G="",Z="",X="",I+="DTP*",I+="472*",k.indexOf("-")>0&&k.indexOf("/")<0){I+="RD8*",G=k.split("-")[0],Z=k.split("-")[1];let e=new Date(G.slice(0,4),G.slice(4,6)-1,G.slice(6,8));if(G=e.getFullYear().toString()+(e.getMonth()+1).toString().padStart(2,"0")+e.getDate().toString().padStart(2,"0"),Z.length>0){let e=new Date(Z.slice(0,4),Z.slice(4,6)-1,Z.slice(6,8));Z=e.getFullYear().toString()+(e.getMonth()+1).toString().padStart(2,"0")+e.getDate().toString().padStart(2,"0"),I+=G+"-"+Z+"~\n"}}else I+="D8*",G=k.slice(0,8),I+=j(G)+"~\n";let de=q(_.clearingHouseId),ce=q(_.receiverId);w="ISA*",w+="00*",w+="          *",w+="00*",w+="          *",w+="ZZ*",w+=de.padEnd(15)+"*",w+="ZZ*",w+=ce.padEnd(15)+"*",w+=F+"*";let le=new Date;w+=B(le)+"*",w+="^*",w+="00501*",w+=_.fileCounter+"*",w+="1*",w+="P*",w+=":~\n",w+="GS*",w+="HC*",w+=de+"*",w+="MMISNYDOH*";let ge=new Date;w+=j(ge)+"*",le=new Date,w+=B(le)+"*",w+="27390894*",w+="X*",w+="005010X223A2~\n",w+="ST*",w+="837*",w+="0001*",w+="005010X223A2~\n",w+="BHT*",w+="0019*",w+="00*",w+="37390894*",ge=new Date,w+=j(ge)+"*",le=new Date,w+=B(le)+"*",w+="CH~\n",w+="NM1*",w+="41*",w+="2*",w+=n+"*",w+="*",w+="*",w+="*",w+="*",w+="46*",w+=q(_.clearingHouseId)+"~\n",w+="PER*",w+="IC*",w+=q(_.submitterName).trim()+"*",w+="EM*";let ue=q(_.submitterEmailAddress);w+=ue+"*",w+="~\n",w+="NM1*",w+="40*",w+="2*",w+=q(_.receiverName).trim()+"*",w+="*",w+="*",w+="*",w+="*",w+="46*",w+=q(_.interChangeReceiverId)+"~\n",A="",A+="SE*",A+=(w+I).split("~").length-2+"*",A+="0001~\n",A+="GE*",A+="1*",A+="27390894*~\n",A+="IEA*",A+="1*",A+=q(_.fileCounter)+"~\n";let me=parseInt(_.patientLastName)+1;if(_.patientlastname=me.toString(),h.writeFile(y,e.file.path),m!==O){m+="</tbody></table></center></div>";let e="837 Billing Files/SCBatchBilling_"+L+"_001.txt";return w=w.replace(/\*\~/g,"~").replace(/\~\n/g,"~"),R=w,I=I.replace(/\*\~/g,"~").replace(/\~\n/g,"~"),R+=I,A=A.replace(/\*\~/g,"~").replace(/\~\n/g,"~"),R+=A,C.writeFileSync(e,R),console.error("CSV File is parsed. However, some issues are identified in the Excel file."),m}{const e=new Date,t=`SCBatchBilling_${e.getFullYear().toString()+("0"+(e.getMonth()+1)).slice(-2)+("0"+e.getDate()).slice(-2)}_001.txt`,r=b.join("837 Billing Files",t);w=w.replace("*~","~").replace("~\n","~"),R=w,I=I.replace(/\*\~/g,"~").replace(/\~\n/g,"~"),R+=I,A=A.replace(/\*\~/g,"~").replace(/\~\n/g,"~"),R+=A,console.log("fileContent2",R),C.writeFileSync(r,R),console.error("CSV File is successfully parsed.","SUCCESSFUL")}}}else m+=`<tr><td>${r}</td><td>Y</td><td>Organization Name</td><td>Not provided</td><td>Error</td></tr>`})),I=R,t.status(200).json({message:"File received and processed successfully",details:e.body,generatedData:I,error_msg:m,totalRows:v})}catch(Y){console.error("Error processing request:",Y),t.status(500).send("CSV File is parsed. However, some issues are identified in the Excel file.")}}));const T=D,L=e(),_=process.env.PORT||5e3;L.use(t()),L.use((0,e.json)()),L.use(T),L.listen(_,(()=>{var e;e=function(e){e&&console.error(e)},i.connect(((t,r,n)=>{t?(console.error("Error acquiring client",t.stack),e(t)):(console.log("Connected to PostgreSQL"),n(),e(null))})),console.log(`Server is running on port: ${_}`)}))})();